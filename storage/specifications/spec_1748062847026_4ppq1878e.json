{
  "id": "spec_1748062847026_4ppq1878e",
  "markdown": "```markdown\n# Odoo Module Development Specification: Sales Product Code Name\n\n## Module Header\n\n*   **Module Name:** sales_product_code_name\n*   **Author:** Odoo Module Builder App\n*   **Version:** 18.0.1.0.0\n*   **Date:** 2023-10-27\n*   **Status:** Initial Specification\n*   **Purpose:** To enable client-specific product codes and names on sales orders.\n\n---\n\n## 1. Module Overview\n\n### 1.1. Purpose and Objectives\n\nThe primary purpose of the \"Sales Product Code Name\" module is to extend Odoo's core product management capabilities by allowing users to define and manage different product names and codes for the same product, specifically tailored for individual clients. This functionality mirrors the existing `supplierinfo` mechanism for vendors but applies it to customers via a new `product.customerinfo` model.\n\n**Objectives:**\n*   **Client-Specific Product Data:** Provide a robust mechanism to store multiple client-specific product names and codes for a single product.\n*   **Automated Sales Order Population:** Ensure that when a sales order is created for a specific client, the corresponding product names and codes on the sales order lines are automatically updated to reflect the client's preferred nomenclature.\n*   **User-Friendly Configuration:** Offer an intuitive user interface on the product form to configure client-specific product information, similar to the supplier information section.\n*   **Odoo Compatibility:** Maintain full compatibility with Odoo Community and Enterprise Edition 18.0.\n\n### 1.2. Target Odoo Version and Edition Compatibility\n\n*   **Version:** Odoo 18.0\n*   **Edition:** Fully compatible with both Odoo Community Edition and Odoo Enterprise Edition.\n\n### 1.3. Dependencies and Requirements\n\n*   **Odoo Modules:**\n    *   `sale_management`: Required for sales order functionality.\n    *   `product`: Required for product management.\n*   **External Libraries/Frameworks:** None.\n*   **Hardware/Software:** Standard Odoo deployment environment.\n\n---\n\n## 2. Functional Requirements\n\n### 2.1. Detailed Feature Descriptions\n\n#### 2.1.1. Product Client Information Configuration\n\n*   A new Odoo model, `product.customerinfo`, will be introduced to store client-specific product details.\n*   This model will have the following key fields:\n    *   `product_tmpl_id` (Many2one to `product.template`): The base product for which this client-specific info applies. (Required)\n    *   `partner_id` (Many2one to `res.partner`): The specific client (customer) for whom this name/code is valid. (Required, domain restricted to customers).\n    *   `product_name` (Char): The product name as recognized by the client. (Optional)\n    *   `product_code` (Char): The product code (SKU) as recognized by the client. (Optional)\n    *   `date_start` (Date): The effective start date for this client-specific info. (Optional)\n    *   `date_end` (Date): The effective end date for this client-specific info. (Optional)\n*   A new `One2many` field, `customer_info_ids`, will be added to the `product.template` model, linking to `product.customerinfo` records.\n*   This `One2many` field will be displayed as a configurable table within the \"Sales\" tab of the `product.template` form view, providing a similar user experience to the existing `supplierinfo` table.\n*   **Validation:**\n    *   A product can have multiple `product.customerinfo` records for a given client, but only one active record (based on `date_start`/`date_end` overlap) at any given time. This will be enforced via a Python constraint.\n\n#### 2.1.2. Sales Order Line Integration\n\n*   When a product is added or updated on a `sale.order.line`, the system will automatically look up the relevant `product.customerinfo` record.\n*   The lookup will be based on:\n    *   The `product_id` on the `sale.order.line`.\n    *   The `partner_id` (customer) of the `sale.order`.\n    *   The current date (if `date_start` and `date_end` are used for filtering).\n*   If a matching and active `product.customerinfo` record is found:\n    *   The `name` field (product description) on the `sale.order.line` will be updated.\n        *   The `name` field on the `sale.order.line` will be formatted as `\"[CLIENT_CODE] CLIENT_NAME\"` (if both present), `\"[CLIENT_CODE] Product Default Name\"` (code only), or `\"CLIENT_NAME\"` (name only). Default product name/code used if no client info.\n    *   If no matching `product.customerinfo` record is found, the standard product name and code (default code) will be used for the `sale.order.line`'s `name` field.\n*   The system will prioritize client-specific information over standard product information.\n\n### 2.2. User Stories and Use Cases\n\n*   **US-001 (Sales Manager - Configuration):** As a Sales Manager, I want to define specific product codes and names for each of my key clients directly on the product form, so that their sales orders reflect their internal nomenclature and avoid confusion.\n    *   **Use Case:** A Sales Manager navigates to a product form, goes to the \"Sales\" tab, and adds a new line in the \"Client Product Information\" table. They select \"Client A\", input \"Client A's Special Widget Name\" and \"CA-WIDGET-001\" as the code, and save the record.\n*   **US-002 (Sales Representative - Sales Order Creation):** As a Sales Representative, when I create a sales order for a specific client, I want the product names and codes on the order lines to automatically update to the client's preferred names and codes, ensuring accuracy and reducing manual data entry.\n    *   **Use Case:** A Sales Representative creates a new Sales Order for \"Client A\". When they add \"Product X\" (which has \"Client A's Special Widget Name\" and \"CA-WIDGET-001\" configured for Client A), the sales order line automatically displays \"CA-WIDGET-001 - Client A's Special Widget Name\" in the product description field.\n*   **US-003 (Sales Representative - Default Behavior):** As a Sales Representative, when I create a sales order for a client who does not have specific product configurations, I want the system to use the standard product name and code.\n    *   **Use Case:** A Sales Representative creates a Sales Order for \"Client C\" (for whom no specific product info is configured). When they add \"Product X\", the sales order line displays the standard product name and default code (e.g., \"PROD-X - Product X Standard Name\").\n*   **US-004 (Administrator - Data Management):** As an Administrator, I want to easily manage, update, and delete client-specific product information, including validity periods, to maintain accurate data over time.\n    *   **Use Case:** An Administrator needs to update \"Client B\"'s product code for \"Product Y\". They navigate to Product Y's form, find the entry for Client B, edit the code, and save. They can also set an end date for an old code and add a new entry with a future start date for a new code.\n\n### 2.3. Business Logic Requirements\n\n*   **Priority:** Client-specific product information takes precedence over standard product information on sales orders.\n*   **Date Validity:** If `date_start` and `date_end` are specified, only records where the current date falls within the defined range will be considered active and used for sales orders.\n*   **Fallback Mechanism:** If no active client-specific product name is found, the system must fall back to the `product.product`'s standard name. If no client-specific code is found, the system should either use the `product.product`'s default code or omit the code from the description, based on the final formatting decision.\n*   **Uniqueness:** For a given product, there can only be one active `product.customerinfo` record for a specific client at any given time (based on date ranges).\n*   **Performance:** The lookup mechanism for client-specific product information must be efficient, especially when dealing with a large number of products and client configurations.\n\n---\n\n## 3. Technical Specifications\n\n### 3.1. Data Models and Relationships\n\n*   **New Model:** `product.customerinfo`\n    *   **Object Name:** `product.customerinfo`\n    *   **Inherits:** `models.Model`\n    *   **Fields:**\n        *   `product_tmpl_id` (`fields.Many2one('product.template', string='Product Template', required=True, ondelete='cascade')`)\n        *   `partner_id` (`fields.Many2one('res.partner', string='Client', required=True, domain=[('customer_rank', '>', 0)])`)\n        *   `product_name` (`fields.Char(string='Client Product Name')`)\n        *   `product_code` (`fields.Char(string='Client Product Code')`)\n        *   `date_start` (`fields.Date(string='Start Date')`)\n        *   `date_end` (`fields.Date(string='End Date')`)\n\n*   **Model Extensions:**\n    *   **`product.template`:**\n        *   Add `customer_info_ids = fields.One2many('product.customerinfo', 'product_tmpl_id', string='Client Product Information')`\n    *   **`product.product`:**\n        *   Override `_get_sale_order_line_name(self, product_id, partner_id, ignore_description_change, description)`: This method will be extended to fetch and apply client-specific product name/code.\n    *   **`sale.order.line`:**\n        *   No direct field additions. The `name` field will be dynamically populated by the overridden method on `product.product`.\n\n### 3.2. Views and User Interface Requirements\n\n*   **`product.customerinfo` Views:**\n    *   **Tree View:** A simple list view displaying `Client`, `Client Product Name`, `Client Product Code`, `Start Date`, `End Date`.\n    *   **Form View:** A minimal form view for creating/editing individual `product.customerinfo` records.\n*   **`product.template` Form View Extension:**\n    *   Modify the `product.template` form view (`product.product_template_form_view`).\n    *   Within the `<page name=\"sales\">` (Sales tab), add a new group/section.\n    *   Embed the `customer_info_ids` `One22many` field, displaying it using the tree view for `product.customerinfo`.\n\n### 3.3. Workflow and Process Definitions\n\n*   **Product Configuration Workflow:**\n    1.  User navigates to `Sales -> Products -> Products`.\n    2.  Selects an existing product or creates a new one.\n    3.  Goes to the \"Sales\" tab.\n    4.  In the \"Client Product Information\" section, clicks \"Add a line\".\n    5.  Selects a client, enters the desired client product name and/or code, and optionally sets start/end dates.\n    6.  Saves the product form.\n*   **Sales Order Creation Workflow:**\n    1.  User navigates to `Sales -> Orders -> Sales Orders`.\n    2.  Creates a new sales order or opens an existing draft.\n    3.  Selects the `Customer` for the sales order.\n    4.  Adds a product to the order line.\n    5.  Upon selecting the product, the `name` field on the sales order line automatically updates to the client-specific product name and code if configured for the chosen customer.\n\n### 3.4. API Endpoints\n\n*   No new public API endpoints are required. The module will leverage standard Odoo ORM methods for data interaction and view extensions for UI.\n\n---\n\n## 4. Security and Access Control\n\n### 4.1. User Groups and Permissions\n\n*   **Sales / User: All Documents (`sales_team.group_sale_salesman`):**\n    *   **Read:** `",
  "timestamp": "2025-05-24T05:04:12.481Z",
  "version": 3
}