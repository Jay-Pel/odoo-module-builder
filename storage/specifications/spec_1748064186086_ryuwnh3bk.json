{
  "id": "spec_1748064186086_ryuwnh3bk",
  "markdown": "# Development Specification: Sale Product Code Module\n\n*   **Module Name:** `sale_product_code`\n*   **Author:** Odoo Module Builder App\n*   **Version:** 1.0.0\n*   **Date:** 2023-10-27\n\n---\n\n## 1. Module Overview\n\n### 1.1. Purpose and Objectives\n\nThe primary purpose of the `sale_product_code` module is to extend Odoo's product management capabilities by allowing businesses to define and manage client-specific product names and codes for their products. This addresses the common business requirement where a single product might be known by different names or codes by different clients, or where specific agreements dictate unique identifiers for sales documentation.\n\nThe module aims to:\n*   **Enhance Sales Order Accuracy:** Automatically use client-specific product information on sales orders, reducing manual errors and ensuring consistency.\n*   **Improve Client Communication:** Provide clients with sales documents that reflect their internal product naming conventions and codes, fostering clarity and trust.\n*   **Streamline Product Identification:** Centralize the management of client-specific product data within Odoo, making it easily accessible and manageable from the product master.\n*   **Replicate SupplierInfo Logic for Customers:** Mirror the existing `product.supplierinfo` functionality but applied to customers, offering a familiar user experience.\n\n### 1.2. Target Odoo Version and Edition Compatibility\n\n*   **Odoo Version:** 18.0\n*   **Odoo Edition Compatibility:** Fully compatible with both Odoo Community and Odoo Enterprise Editions.\n\n### 1.3. Dependencies and Requirements\n\n*   **Core Odoo Modules:**\n    *   `base`: Standard Odoo base module.\n    *   `product`: For product master data management.\n    *   `sale_management`: For sales order processing and related functionalities.\n*   **External Dependencies:** None. The module will be developed entirely within the Odoo framework.\n\n## 2. Functional Requirements\n\n### 2.1. Detailed Feature Descriptions\n\n#### 2.1.1. Client-Specific Product Information Storage\nA new master data model will be introduced to store client-specific product names and codes. This model will link a `product.template` record to a `res.partner` (customer) record, along with the custom name and code.\n\n*   **Data Fields:**\n    *   `Product Template`: Link to the standard Odoo product.\n    *   `Customer`: Link to the specific client (partner).\n    *   `Customer Product Name`: A text field to manually input the product name specific to this client.\n    *   `Customer Product Code`: A text field to manually input the product code specific to this client.\n*   **Uniqueness Constraint:** Each combination of Product Template and Customer must be unique.\n\n#### 2.1.2. Configuration Interface on Product Form\nUsers will be able to configure client-specific product information directly from the `product.template` form view.\n\n*   **Location:** A new section or tab will be added to the \"Sales\" tab of the `product.template` form.\n*   **Display:** The client-specific product information will be presented in a list (tree view) allowing for inline creation, editing, and deletion of records, similar to how `product.supplierinfo` (Vendor Pricelists) are managed.\n*   **Manual Input:** All `Customer Product Name` and `Customer Product Code` fields will be manually editable.\n\n#### 2.1.3. Automatic Application on Sales Order Lines\nWhen a sales order line is created or updated, the system will automatically look up and apply the relevant client-specific product name and code.\n\n*   **Lookup Logic:**\n    1.  Identify the `product_id` on the `sale.order.line`.\n    2.  Identify the `partner_id` (customer) on the parent `sale.order`.\n    3.  Search for a `product.customerinfo` record matching both the `product_id`'s template and the `partner_id`.\n*   **Application:** If a matching `product.customerinfo` record is found:\n    *   The `name` field of the `sale.order.line` will be updated to include the `Customer Product Code` (prepended) and `Customer Product Name`.\n    *   The standard Odoo product description (if any) will follow the client-specific name.\n*   **Fallback:** If no matching `product.customerinfo` record is found for the specific client, the standard product name and code (from `product.template`) will be used as per Odoo's default behavior.\n\n### 2.2. User Stories and Use Cases\n\n*   **As a Sales Manager,** I want to define specific product names and codes for each client on the product master, so that sales orders automatically display the correct information tailored to that client.\n    *   **Use Case:** A product \"Office Chair X1\" is known as \"Ergonomic Chair\" by Client A and \"Deluxe Seating Unit\" by Client B. The sales manager configures these aliases on the product form.\n*   **As a Product Manager,** I want to easily configure client-specific product details directly from the product form, similar to how I manage supplier information, to maintain a comprehensive product catalog.\n    *   **Use Case:** When creating a new product, the product manager navigates to the \"Sales\" tab and adds multiple customer-specific entries for different clients who might use different internal SKUs or names.\n*   **As a Sales Representative,** when I create a sales order for a client, I expect the product names and codes on the order lines to automatically reflect the client-specific agreements, ensuring consistency and avoiding manual errors.\n    *   **Use Case:** A sales rep adds \"Office Chair X1\" to a sales order for Client A. The sales order line automatically shows \"Ergonomic Chair\" with Client A's specific product code, even though the internal product name is \"Office Chair X1\".\n*   **As a Client,** I want to receive sales orders that clearly show the product names and codes we have agreed upon, making it easy for me to process the order internally.\n    *   **Use Case:** Client A receives a sales order PDF from Odoo, and the item description for \"Office Chair X1\" is \"ERG-001 - Ergonomic Chair\", which matches their internal naming convention.\n\n### 2.3. Business Logic Requirements\n\n*   **Priority:** Client-specific product information (`product.customerinfo`) must take precedence over the standard `product.template` information when a matching record is found for the sales order's customer.\n*   **Uniqueness:** A product can only have one specific name and code per customer. Duplicates will be prevented by a database constraint.\n*   **Manual Input:** `Customer Product Name` and `Customer Product Code` are free-text fields and will be manually entered by users. No automatic generation is required.\n*   **Dynamic Update:** The `sale.order.line` fields should update dynamically as the product or customer on the `sale.order` changes.\n\n## 3. Technical Specifications\n\n### 3.1. Data Models and Relationships\n\n#### 3.1.1. New Model: `product.customerinfo`\nThis model will store the client-specific product details.\n\n*   **Model Name:** `product.customerinfo`\n*   **Database Table:** `product_customerinfo`\n*   **Fields:**\n    *   `product_tmpl_id` (`Many2one` to `product.template`): The standard product template.\n        *   `string`: 'Product Template'\n        *   `required`: `True`\n        *   `ondelete`: `'cascade'` (If the product template is deleted, its customer info records are also deleted).\n    *   `partner_id` (`Many2one` to `res.partner`): The customer associated with this specific product information.\n        *   `string`: 'Customer'\n        *   `required`: `True`\n        *   `domain`: `[('customer_rank', '>', 0)]` (To ensure only customers are selectable).\n    *   `product_name` (`Char`): The product name specific to this customer.\n        *   `string`: 'Customer Product Name'\n        *   `required`: `False` (Can be empty if only code is needed, or vice-versa)\n    *   `product_code` (`Char`): The product code specific to this customer.\n        *   `string`: 'Customer Product Code'\n        *   `required`: `False` (Can be empty if only name is needed, or vice-versa)\n*   **SQL Constraints:**\n    *   `_sql_constraints = [('unique_product_customer', 'unique(product_tmpl_id, partner_id)', 'A product customer information record must be unique per product and customer.')]`\n\n#### 3.1.2. Extension of `product.template`\nThe `product.template` model will be extended to include a `one2many` field linking to `product.customerinfo` records.\n\n*   **Field:**\n    *   `customer_info_ids` (`One2many` to `product.customerinfo`):\n        *   `string`: 'Customer Product Information'\n        *   `comodel_name`: `'product.customerinfo'`\n        *   `inverse_name`: `'product_tmpl_id'`\n\n#### 3.1.3. Extension of `sale.order.line`\nThe `sale.order.line` model will be extended/modified to apply the client-specific product information.\n\n*   **Method Override:**\n    *   Override or extend the `_get_sale_order_line_description` method (or similar Odoo 18 logic responsible for computing the `name` field on `sale.order.line`).\n    *   Within this method, retrieve the `product_tmpl_id` from `product_id` and the `partner_id` from `order_id.partner_id`.\n    *   Query `product.customerinfo` for a matching record.\n    *   If found, construct the `name` field using the `product_code` and `product_name` from `product.customerinfo`, potentially prepending the code and then the name, followed by the standard product description.\n    *   If not found, call `super()` to revert to Odoo's default behavior.\n\n### 3.2. Views and User Interface Requirements\n\n#### 3.2.1. `product.template` Form View\n*   **Location:** Extend the `product.template` form view. Add a new `<page>` or `<group>` within the existing `<notebook>` on the \"Sales\" tab.\n*   **Content:**\n    *   A `one2many` tree view for `customer_info_ids`.\n    *   The tree view should display `Customer`, `Customer Product Name`, and `Customer Product Code`.\n    *   Allow inline creation/editing of records using the standard Odoo `tree` and `form` views within the `one2many`.\n\n#### 3.2.2. `sale.order` Form View\n*   No direct modifications to the `sale.order` form view are required beyond ensuring the `sale.order.line` `name` field correctly reflects the client-specific information. This will happen automatically once the `sale.order.line` `name` computation is correctly overridden.\n\n### 3.3. Workflow and Process Definitions\n\n*   **Product Configuration Workflow:**\n    1.  Navigate to `Sales > Products > Products`.\n    2.  Select or create a product.\n    3.  Go to the \"Sales\" tab.\n    4.  In the \"Customer Product Information\" section, click \"Add a line\".\n    5.  Select the `Customer` and manually input the `Customer Product Name` and `Customer Product Code`.\n    6.  Save the product.\n*   **Sales Order Creation Workflow:**\n    1.  Navigate to `Sales > Orders > Quotations`.\n    2.  Create a new quotation.\n    3.  Select a `Customer`.\n    4.  Add a `Product` to an order line.\n    5.  Observe that the \"Description\" (`name`) field on the `sale.order.line` automatically updates to show the client-specific product code and name, if configured for the selected customer and product. If not, the standard product description will be used.\n\n### 3.4. API Endpoints\n\nNo specific custom API endpoints are required. The module will leverage standard Odoo ORM methods (`create`, `write`, `read`, `search`) for data interaction.\n\n## 4. Security and Access Control\n\n### 4.1. User Groups and Permissions\n\n*   **Sales / User: Own Documents Only (`base.group_user`)**:\n    *   **Read:** `product.customerinfo` records.\n    *   **Write/Create/Delete:** None (unless explicitly granted, not part of core requirement).\n*   **Sales / Administrator (`sales_team.group_sale_manager`)**:\n    *   **Read:** `product.customerinfo` records.\n    *   **Write/Create/Delete:** `product.customerinfo` records. This group will be responsible for managing client-specific product information.\n\n### 4.2. Security Rules and Access Rights\n\n*   **Model:** `product.customerinfo`\n    *   **Access Rights (ACLs):**\n        *   `ir.model.access.csv` entry will define permissions:\n            *   `access_product_customerinfo_sales_user`: `Sales / User` group - Read access only.\n            *   `access_product_customerinfo_sales_manager`: `Sales / Administrator` group - Read, Write, Create, Delete access.\n*   **Record Rules:** No specific record rules are anticipated as `product.customerinfo` records are not inherently sensitive in a way that requires row-level security based on user ownership or specific customer access. Access is controlled by the user's role (Sales User vs. Sales Manager).\n\n### 4.3. Data Privacy Considerations\n\n*   `product.customerinfo` contains client-specific product names and codes. While not highly sensitive, this information should only be accessible to relevant sales and product management personnel.\n*   The defined access rights ensure that only authorized users (Sales Managers) can modify this data, and sales users can view it to ensure accurate sales order generation.\n*   Standard Odoo security mechanisms (user authentication, role-based access control) will be relied upon to protect this data.\n\n## 5. Configuration and Settings\n\n### 5.1. Module Configuration Options\n\n*   No specific global configuration options or settings are required for this module. All relevant configurations (client-specific product names/codes) are managed directly on the `product.template` form.\n\n### 5.2. System Parameters\n\n*   No system parameters (`ir.config_parameter`) are needed for this module's functionality.\n\n### 5.3. Installation and Setup Requirements\n\n*   **Standard Odoo Module Installation:**\n    1.  Place the `sale_product_code` module directory within Odoo's `addons` path.\n    2.  Restart the Odoo server (if not running in development mode with `--dev=all`).\n    3.  Activate Odoo's Developer Mode.\n    4.  Navigate to the `Apps` menu.\n    5.  Click \"Update Apps List\".\n    6.  Search for \"Sale Product Code\" (or `sale_product_code`).\n    7.  Click the \"Install\" button for the module.\n\n## 6. Testing Strategy\n\n### 6.1. Unit Testing Scenarios\n\n*   **Model `product.customerinfo`:**\n    *   Verify creation of `product.customerinfo` records with valid data.\n    *   Verify that attempting to create a duplicate `product.customerinfo` record (same product and customer) triggers the `unique` constraint and fails.\n    *   Test `product_tmpl_id` and `partner_id` `required` constraints.\n*   **`product.template` Integration:**\n    *   Verify that `customer_info_ids` field correctly displays and allows management of `product.customerinfo` records on the `product.template` form.\n*   **`sale.order.line` Logic (Override of `_get_sale_order_line_description`):**\n    *   **Scenario 1 (Match Found):** Create a `product.customerinfo` record for a specific product and customer. Create a `sale.order` for that customer and add the product. Assert that the `sale.order.line.name` correctly reflects the `customer_product_code` and `customer_product_name`.\n    *   **Scenario 2 (No Match):** Create a `sale.order` for a customer who does NOT have a `product.customerinfo` record for the added product. Assert that the `sale.order.line.name` uses the standard `product.template` name and code.\n    *   **Scenario 3 (Partial Match - only name/code provided):** Test cases where only `product_name` or only `product_code` is provided in `product.customerinfo`. Ensure the `sale.order.line.name` is constructed correctly.\n    *   **Scenario 4 (Multiple Customer Info Records for Same Product, Different Customers):** Ensure the correct record is selected based on the `sale.order`'s customer.\n    *   **Scenario 5 (Customer Change on SO):** Change the customer on an existing `sale.order`. Verify that the `sale.order.line.name` fields update dynamically to reflect the new customer's specific product info (or fall back to standard).\n    *   **Scenario 6 (Product Change on SO Line):** Change the product on an existing `sale.order.line`. Verify that the `sale.order.line.name` field updates dynamically.\n\n### 6.2. Integration Testing Requirements\n\n*   **Sales Order to Invoice/Delivery Order:**\n    *   Create a sales order with client-specific product information. Confirm the sales order.\n    *   Generate a delivery order. Verify that the product names/codes on the delivery order lines correspond to the sales order lines.\n    *   Generate an invoice. Verify that the product names/codes on the invoice lines correspond to the sales order lines.\n*   **Reporting:**\n    *   Generate standard Odoo sales reports (e.g., Sales Analysis). Confirm that the underlying product names/codes are correctly stored and utilized in reports, even if the display name on the line is customized. (Note: The `name` field of `sale.order.line` is commonly used in reports, so this should be inherently covered).\n*   **Multi-Company/Multi-Currency:** If applicable in the client's environment, test functionality across different companies and currencies to ensure no unexpected interactions. (Assumed not in scope unless specified, but good to note).\n\n### 6.3. User Acceptance Testing (UAT) Criteria\n\n*   **Sales Manager:**\n    *   Can successfully add, edit, and delete client-specific product names/codes on the product form.\n    *   Can easily find the new \"Customer Product Information\" section on the product's \"Sales\" tab.\n    *   Confirms that the uniqueness constraint for Product/Customer combinations is enforced.\n*   **Sales User:**\n    *   When creating a new sales order, confirms that the product description on the sales order line automatically updates to the client-specific name and code when applicable.\n    *   Confirms that if no client-specific information exists, the standard product description is used.\n    *   Verifies that changing the customer on a sales order updates the product descriptions on existing lines.\n*   **Client (Simulated):**\n    *   Confirms that the generated sales order PDFs (and potentially other documents like invoices) display the agreed-upon client-specific product names and codes.\n\n### 6.4. Performance Testing Considerations\n\n*   **Lookup Efficiency:** The lookup for `product.customerinfo` on `sale.order.line` creation/update should be efficient. Ensure `product_tmpl_id` and `partner_id` fields on `product.customerinfo` are indexed by Odoo (which they are by default for Many2one fields).\n*   **Volume:** Test the impact on performance when adding many `sale.order.line` items (e.g., 100+ lines) to a sales order, especially if the `product.customerinfo` table grows very large. The ORM's caching and indexing should mitigate most issues.\n\n## 7. Deployment and Maintenance\n\n### 7.1. Installation Instructions\n\n1.  **Download/Clone:** Obtain the `sale_product_code` module files.\n2.  **Placement:** Place the `sale_product_code` module directory into your Odoo `addons` path (e.g., `/opt/odoo/custom_addons/`).\n3.  **Permissions:** Ensure the Odoo user has appropriate read permissions for the module directory.\n4.  **Restart Odoo:** Restart your Odoo service (e.g., `sudo systemctl restart odoo`).\n5.  **Update Apps List:** Log in to Odoo as an administrator, activate Developer Mode (if not already active), go to `Apps`, and click \"Update Apps List\".\n6.  **Install Module:** Search for \"Sale Product Code\" (or `sale_product_code`) in the Apps list and click \"Install\".\n\n### 7.2. Update and Migration Procedures\n\n*   **Minor Updates:** For minor updates (e.g., bug fixes, small feature enhancements that don't alter data models), standard Odoo module upgrade procedures apply:\n    1.  Replace the existing `sale_product_code` module directory with the updated version.\n    2.  Restart Odoo.\n    3.  Go to `Apps`, search for `sale_product_code`, and click \"Upgrade\".\n*   **Major Updates/Data Model Changes:** If future versions involve significant data model changes (e.g., field renames, new required fields, model splits), specific migration scripts (`pre_init_hook`, `post_init_hook`) will be provided within the module's `migrations` directory to ensure data integrity during the upgrade process. This initial release does not require complex migration scripts.\n\n### 7.3. Backup and Recovery Considerations\n\n*   The data generated by this module (`product.customerinfo` records) resides within the standard Odoo PostgreSQL database.\n*   Standard Odoo database backup and recovery procedures (e.g., regular database dumps, point-in-time recovery) will fully cover the data managed by the `sale_product_code` module. No special backup procedures are required specifically for this module.\n*   Ensure that any custom file system elements (like custom reports or static assets, though none are planned for this module) are also included in the overall Odoo backup strategy.",
  "timestamp": "2025-05-24T05:23:06.087Z",
  "version": 1
}